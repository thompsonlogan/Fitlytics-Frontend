/* tslint:disable */
/* eslint-disable */
/**
 * Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SameSiteMode } from './SameSiteMode';
import {
    SameSiteModeFromJSON,
    SameSiteModeFromJSONTyped,
    SameSiteModeToJSON,
    SameSiteModeToJSONTyped,
} from './SameSiteMode';

/**
 * 
 * @export
 * @interface CookieOptions
 */
export interface CookieOptions {
    /**
     * 
     * @type {string}
     * @memberof CookieOptions
     */
    domain?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CookieOptions
     */
    path?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof CookieOptions
     */
    expires?: Date | null;
    /**
     * 
     * @type {boolean}
     * @memberof CookieOptions
     */
    secure?: boolean;
    /**
     * 
     * @type {SameSiteMode}
     * @memberof CookieOptions
     */
    sameSite?: SameSiteMode;
    /**
     * 
     * @type {boolean}
     * @memberof CookieOptions
     */
    httpOnly?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CookieOptions
     */
    maxAge?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CookieOptions
     */
    isEssential?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof CookieOptions
     */
    readonly extensions?: Array<string> | null;
}



/**
 * Check if a given object implements the CookieOptions interface.
 */
export function instanceOfCookieOptions(value: object): value is CookieOptions {
    return true;
}

export function CookieOptionsFromJSON(json: any): CookieOptions {
    return CookieOptionsFromJSONTyped(json, false);
}

export function CookieOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CookieOptions {
    if (json == null) {
        return json;
    }
    return {
        
        'domain': json['domain'] == null ? undefined : json['domain'],
        'path': json['path'] == null ? undefined : json['path'],
        'expires': json['expires'] == null ? undefined : (new Date(json['expires'])),
        'secure': json['secure'] == null ? undefined : json['secure'],
        'sameSite': json['sameSite'] == null ? undefined : SameSiteModeFromJSON(json['sameSite']),
        'httpOnly': json['httpOnly'] == null ? undefined : json['httpOnly'],
        'maxAge': json['maxAge'] == null ? undefined : json['maxAge'],
        'isEssential': json['isEssential'] == null ? undefined : json['isEssential'],
        'extensions': json['extensions'] == null ? undefined : json['extensions'],
    };
}

export function CookieOptionsToJSON(json: any): CookieOptions {
    return CookieOptionsToJSONTyped(json, false);
}

export function CookieOptionsToJSONTyped(value?: Omit<CookieOptions, 'extensions'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'domain': value['domain'],
        'path': value['path'],
        'expires': value['expires'] == null ? undefined : ((value['expires'] as any).toISOString()),
        'secure': value['secure'],
        'sameSite': SameSiteModeToJSON(value['sameSite']),
        'httpOnly': value['httpOnly'],
        'maxAge': value['maxAge'],
        'isEssential': value['isEssential'],
    };
}

