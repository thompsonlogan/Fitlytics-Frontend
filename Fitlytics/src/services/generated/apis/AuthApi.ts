/* tslint:disable */
/* eslint-disable */
/**
 * Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExternalRegisterRequest,
  JwtTokenResultServiceResponse,
  StringServiceResponse,
} from '../models/index';
import {
    ExternalRegisterRequestFromJSON,
    ExternalRegisterRequestToJSON,
    JwtTokenResultServiceResponseFromJSON,
    JwtTokenResultServiceResponseToJSON,
    StringServiceResponseFromJSON,
    StringServiceResponseToJSON,
} from '../models/index';

export interface ApiAuthExternalLoginCallbackGetRequest {
    returnUrl?: string;
    remoteError?: string;
}

export interface ApiAuthExternalLoginGetRequest {
    provider?: string;
    returnUrl?: string;
}

export interface ApiAuthExternalRegisterPostRequest {
    externalRegisterRequest?: ExternalRegisterRequest;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     */
    async apiAuthAdminGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Auth/admin`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuthAdminGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAuthAdminGetRaw(initOverrides);
    }

    /**
     */
    async apiAuthBothGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Auth/both`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuthBothGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAuthBothGetRaw(initOverrides);
    }

    /**
     */
    async apiAuthExternalLoginCallbackGetRaw(requestParameters: ApiAuthExternalLoginCallbackGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['returnUrl'] != null) {
            queryParameters['returnUrl'] = requestParameters['returnUrl'];
        }

        if (requestParameters['remoteError'] != null) {
            queryParameters['remoteError'] = requestParameters['remoteError'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Auth/external/login/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuthExternalLoginCallbackGet(requestParameters: ApiAuthExternalLoginCallbackGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAuthExternalLoginCallbackGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiAuthExternalLoginGetRaw(requestParameters: ApiAuthExternalLoginGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['provider'] != null) {
            queryParameters['provider'] = requestParameters['provider'];
        }

        if (requestParameters['returnUrl'] != null) {
            queryParameters['returnUrl'] = requestParameters['returnUrl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Auth/external/login`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuthExternalLoginGet(requestParameters: ApiAuthExternalLoginGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAuthExternalLoginGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiAuthExternalRegisterPostRaw(requestParameters: ApiAuthExternalRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringServiceResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Auth/external/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExternalRegisterRequestToJSON(requestParameters['externalRegisterRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringServiceResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthExternalRegisterPost(requestParameters: ApiAuthExternalRegisterPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringServiceResponse> {
        const response = await this.apiAuthExternalRegisterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthLogoutPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtTokenResultServiceResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Auth/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JwtTokenResultServiceResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthLogoutPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtTokenResultServiceResponse> {
        const response = await this.apiAuthLogoutPostRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthUserGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Auth/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuthUserGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAuthUserGetRaw(initOverrides);
    }

}
